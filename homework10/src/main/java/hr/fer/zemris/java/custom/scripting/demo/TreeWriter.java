package hr.fer.zemris.java.custom.scripting.demo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;

import hr.fer.zemris.java.custom.scripting.nodes.DocumentNode;
import hr.fer.zemris.java.custom.scripting.nodes.EchoNode;
import hr.fer.zemris.java.custom.scripting.nodes.ForLoopNode;
import hr.fer.zemris.java.custom.scripting.nodes.INodeVisitor;
import hr.fer.zemris.java.custom.scripting.nodes.TextNode;
import hr.fer.zemris.java.custom.scripting.parser.SmartScriptParser;

/**
 * Program used to demonstrate {@link INodeVisitor} design pattern on Nodes.
 * 
 * @author Kristijan Biscanic
 * 
 */
public class TreeWriter {

	/**
	 * @param args
	 *            1 argument, file name.
	 * @throws IOException
	 *             If {@link IOException} happens.
	 */
	public static void main(String[] args) throws IOException {
		if (args.length != 1) {
			System.err.println("Expected file name as argument!");
			return;
		}

		BufferedReader br = new BufferedReader(new InputStreamReader(
				new FileInputStream(new File(args[0])), StandardCharsets.UTF_8));

		StringBuilder input = new StringBuilder();

		String line = null;
		while (true) {
			line = br.readLine();
			if (line == null) {
				break;
			}
			line = line.trim();
			input.append(line).append("\n");
		}
		br.close();
		String docBody = input.toString();

		SmartScriptParser p = new SmartScriptParser(docBody);
		WriterVisitor visitor = new WriterVisitor();
		p.getDocumentNode().accept(visitor);
	}

	/**
	 * Visitor class for visitor design pattern. This class visits nodes
	 * generated by {@link SmartScriptParser}.
	 * 
	 * @author Kristijan Biscanic
	 * 
	 */
	private static class WriterVisitor implements INodeVisitor {

		@Override
		public void visitTextNode(TextNode node) {
			System.out.print(node.getString());

		}

		@Override
		public void visitForLoopNode(ForLoopNode node) {
			System.out.print(node.getString());
			int cnt = node.numberOfChildren();
			for (int i = 0; i < cnt; i++) {
				node.getChild(i).accept(this);
			}

			System.out.print("[$END$]");

		}

		@Override
		public void visitEchoNode(EchoNode node) {
			System.out.print(node.getString());

		}

		@Override
		public void visitDocumentNode(DocumentNode node) {
			int cnt = node.numberOfChildren();
			for (int i = 0; i < cnt; i++) {
				node.getChild(i).accept(this);
			}

		}

	}

}
